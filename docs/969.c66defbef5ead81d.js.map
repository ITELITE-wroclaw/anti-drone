{"version":3,"file":"969.c66defbef5ead81d.js","mappings":"uMAG+C,MAAAA,EAAA,2BAEzCC,EAAa,MAAnB,MAAMA,EACFC,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,aAAe,qBAIpBD,KAAKE,iBAAmB,aAIxBF,KAAKG,2BAA6B,aAIlCH,KAAKI,6BAA+B,8BAIpCJ,KAAKK,uCAAyC,yCAC9CL,KAAKM,aAAe,gBACpBN,KAAKO,cAAgB,aACrBP,KAAKQ,cAAgB,gBACrBR,KAAKS,WAAa,QACtB,CACAC,sBAAsBC,EAAQC,EAAQC,EAAQC,GAC1C,GAAId,KAAKe,uBAAuBJ,EAAOK,eAanC,YATIhB,KAAKD,KAAKkB,IADVN,EAAOK,cACO,KACVH,EAAOK,OAAOlB,KAAKE,kBAAkBF,KAAKG,4BAA2B,EAI3D,KACVU,EAAOK,OAAOlB,KAAKE,kBAAiB,GAO5CS,EAAOK,cACPE,OAAOlB,KAAKmB,iBAAgB,IAAW,IAAMnB,KAAKD,KAAKkB,IAAIJ,EAAOO,KAAKpB,KAAMkB,OAAOlB,KAAKE,kBAAkBF,KAAKG,8BAGhHe,OAAOlB,KAAKmB,iBAAgB,IAAY,IAAMnB,KAAKD,KAAKkB,IAAIJ,EAAOO,KAAKpB,KAAMkB,OAAOlB,KAAKE,oBAG9F,MAAMmB,EAAaC,SAASC,cAAc,UAC1CF,EAAWG,GAAKxB,KAAKC,aACrBoB,EAAWI,UAAY,GACvBJ,EAAWK,IAAM1B,KAAK2B,oBAAoBhB,EAAQC,EAAQE,GAC1DO,EAAWO,OAAQ,EACnBP,EAAWQ,OAAQ,EAEnBP,SAASQ,qBAAqB,QAAQ,GAAGC,YAAYV,EACzD,CACAW,UACI,MAAMC,EAAOX,SAASY,eAAelC,KAAKC,cACtCgC,GACAA,EAAKE,SAETjB,OAAOlB,KAAKmB,wBAAqBiB,EACjClB,OAAOlB,KAAKE,uBAAoBkC,CACpC,CAIArB,uBAAuBC,GACnB,SAAKE,OAAOlB,KAAKmB,gBAAgBH,KAC5BE,OAAOlB,KAAKE,oBAGRc,GACLE,OAAOlB,KAAKE,kBAAkBF,KAAKG,6BAI9Be,OAAOlB,KAAKE,kBAAkBmC,SAI3C,CAMAlB,gBAAgBH,GACZ,OAAOA,EACDhB,KAAKK,uCACLL,KAAKI,4BACf,CAIAkC,iBAAiBC,GACb,OAAKA,EAGG,OAAMA,IAFH,EAGf,CAIAZ,oBAAoBhB,EAAQC,EAAQE,GAMhC,MAAQ,eALOH,EAAO6B,gBAChBxC,KAAKM,aACLN,KAAKO,2BACCI,EAAOK,cAAgBhB,KAAKQ,cAAgBR,KAAKS,qBAC5CT,KAAKmB,gBAAgBR,EAAOK,yBAC8BJ,IAASZ,KAAKsC,iBAAiBxB,IAC9G,EAEejB,SAAc4C,UAAI,SAAAC,GAAA,WAAAA,GAAwF7C,GAAV8C,MAAyCA,OAAS,EAClJ9C,EAAc+C,WADkFD,MAAE,CAAAE,MACYhD,EAAaiD,QAAbjD,EAAa4C,UAAAM,WAAc,SArHtJlD,CAAa,KA6HbmD,EAA+B,MAArC,MAAMA,EACFlD,YAAYmD,EAAUlD,EAAMmD,EAAUC,GAClCnD,KAAKiD,SAAWA,EAChBjD,KAAKD,KAAOA,EACZC,KAAKkD,SAAWA,EAChBlD,KAAKmD,cAAgBA,EAIrBnD,KAAKoD,kBAAoB,kBACzBpD,KAAKqD,cAAe,EAIpBrD,KAAKwC,iBAAkB,EACvBxC,KAAKgB,eAAgB,EAIrBhB,KAAKsD,KAAO,QAIZtD,KAAKuD,SAAW,EAKhBvD,KAAKwD,QAAU,IAAIC,MAInBzD,KAAK0D,KAAO,IAAID,MAIhBzD,KAAK2D,MAAQ,IAAIF,MAIjBzD,KAAK4D,MAAQ,IAAIH,MAIjBzD,KAAK6D,MAAQ,IAAIJ,MAIjBzD,KAAK8D,OAAS,IAAIL,MAIlBzD,KAAK+D,gBAAiB,EAKtB/D,KAAKgE,0BAA2B,EAIhChE,KAAKiE,SAAYC,MACjBlE,KAAKmE,UAAaD,MAIlBlE,KAAKoE,UAAW,CACpB,CACAC,kBACIrE,KAAKsE,QAAUtE,KAAKkD,SAASqB,IAAIC,UAAWpC,EAAWqC,MAAYC,WAAWJ,OAClF,CACAK,qBACQ3E,KAAKqD,eACLrD,KAAKqD,cAAe,EACpBrD,KAAK4E,iBAEb,CACAC,YAAYC,GAEJA,GAAWA,EAAQvC,KAEduC,EAAQvC,GAAGwC,aACZD,EAAQvC,GAAGyC,eAAiBF,EAAQvC,GAAG0C,eACvCjF,KAAKmD,cAAcnB,UAGvB8C,GAAWA,EAAQtC,kBAEdsC,EAAQtC,gBAAgBuC,aACzBD,EAAQtC,gBAAgBwC,eACpBF,EAAQtC,gBAAgByC,eAC5BjF,KAAKmD,cAAcnB,UAG3BhC,KAAKqD,cAAe,CACxB,CAIA6B,cACI,OAAOlF,KAAKmF,aAAaD,YAAYlF,KAAKoF,UAC9C,CAIAC,eACI,OAAOrF,KAAKoF,SAChB,CAIAE,eACItF,KAAKD,KAAKkB,IAAI,KAEVjB,KAAKmF,aAAaxB,QAElB3D,KAAKiE,cAAS7B,GACdpC,KAAKmE,eAAU/B,GAEfpC,KAAK2D,MAAM4B,MAAK,EAExB,CAIAC,qBACI,OAAOxF,KAAKyF,eAChB,CAIAC,gBACI1F,KAAK4E,gBACT,CACAe,kBAAkBC,GACd,MAAMC,EAAcvE,SAASY,eAAe0D,GAC5C,IAAKC,EACD,MAAMC,MAAO,4BAA2BF,oBAG5C5F,KAAK6F,YAAcA,CACvB,CAIAE,kBAGI/F,KAAKD,KAAKiG,kBAAkB,KAGxBC,WAAW,KACPjG,KAAKoF,UAAYpF,KAAKmF,aAAavE,OAAOZ,KAAK4F,cAAe5F,KAAKkG,wBACnElG,KAAK4D,MAAM2B,MAAK,EACjB,EAAC,EAEZ,CAKAY,eAAeC,GACXpG,KAAKyF,gBAAkBW,EACvBpG,KAAKwD,QAAQ+B,KAAKa,GAClBpG,KAAKD,KAAKkB,IAAI,KACVjB,KAAKiE,SAASmC,GACdpG,KAAKmE,UAAUiC,EAAQ,GAEvBpG,KAAKgE,0BACLhE,KAAKsF,cAEb,CACAe,wBACI,WAAWC,MAAOC,qBAAuBC,KAAKC,MAAsB,KAAhBD,KAAKE,SAC7D,CACA9B,iBAEI5E,KAAK2G,uBAEL3G,KAAK4G,0BACL5G,KAAKmD,cAAczC,sBAAsB,CACrC8B,gBAAiBxC,KAAKwC,gBACtBxB,cAAehB,KAAKgB,eACrB,WAAa6F,IACZ7G,KAAK8G,eAAeD,EAAU,EAC/B7G,KAAKuC,GACZ,CAIAuE,eAAeC,GAGX,GADA/G,KAAKmF,aAAe4B,GACf/G,KAAKmF,aACN,MAAMW,MAAO,+CAGjB9F,KAAKoE,UAAW,EAEhBpE,KAAK0D,KAAK6B,OAEVvF,KAAK+F,kBAED/F,KAAK+D,iBACL/D,KAAK+D,gBAAiB,EACtB/D,KAAK4E,iBAEb,CACAoC,oBACI,OAAOhH,KAAKoD,kBAAoBpD,KAAKqG,uBACzC,CACAO,0BAGI,GADA5G,KAAK4F,cAAgB5F,KAAKgH,qBACrBhH,KAAK4F,cACN,MAAME,MAAO,8BAEjB,IAAK9F,KAAKiH,mBACN,MAAMnB,MAAO,0CAGjB9F,KAAKiH,mBAAmBC,cAAczF,UAAY,GAElD,MAAM0F,EAAUnH,KAAKiD,SAAS1B,cAAc,OAC5C4F,EAAQ3F,GAAKxB,KAAK4F,cAClB5F,KAAKiD,SAASlB,YAAY/B,KAAKiH,mBAAmBC,cAAeC,GAGjElB,WAAW,KAEHjG,KAAK4F,eACL5F,KAAK2F,kBAAkB3F,KAAK4F,cAAa,EAE9C,EACP,CAKAwB,WAAWC,GAAO,CAIlBC,iBAAiBC,GACbvH,KAAKiE,SAAWsD,CACpB,CAIAC,kBAAkBD,GACdvH,KAAKmE,UAAYoD,CACrB,CAIAE,sBACIzH,KAAKD,KAAKkB,IAAI,KACVjB,KAAKiE,cAAS7B,GACdpC,KAAKmE,eAAU/B,EAAS,GAE5BpC,KAAK6D,MAAM0B,MACf,CAIAmC,uBACI1H,KAAK8D,OAAOyB,OAEZvF,KAAKsF,cACT,EAEetC,SAAgCP,UAAI,SAAAC,GAAA,WAAAA,GAAwFM,GAxR5BL,MAwR6EA,OAxR7EA,MAwRsGA,OAxRtGA,MAwR4HA,OAxR5HA,MAwRoJ9C,GAAa,EACjQmD,EAAgC2E,UAzRgEhF,MAAE,CAAAW,KAyRcN,EAA+B4E,OAAA,CAAAC,QAAA,UAAArF,gBAAA,kBAAAxB,cAAA,gBAAAsC,KAAA,OAAAf,GAAA,KAAAgB,SAAA,YAAAuE,QAAA,CAAAtE,QAAA,UAAAE,KAAA,OAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,OAAA,UAAAiE,SAAA,CAzR/CpF,SAS7GK,CAA+B,KA6SrC,IAAIgF,EACH,SAAUA,GACPA,SAAcA,EAAcC,mBAAwB,GAAK,qBACzDD,EAAcA,EAAcE,WAAgB,GAAK,aAF1CF,CAGX,CAHC,CAGEA,GAAkC,CAAC,GAJpB,IAwFZG,EAAmB,MAAzB,MAAMA,UAA4BnF,EAC9BlD,YAAYmD,EAAUlD,EAAMmD,EAAUC,GAClCiF,MAAMnF,EAAUlD,EAAMmD,EAAUC,GAChCnD,KAAKiD,SAAWA,EAChBjD,KAAKD,KAAOA,EACZC,KAAKkD,SAAWA,EAChBlD,KAAKmD,cAAgBA,EAIrBnD,KAAKqI,8BAAgC,6BAIrCrI,KAAKsI,+BAAiC,8BAItCtI,KAAKuI,MAAQ,QAIbvI,KAAKwI,KAAO,SACZxI,KAAKyI,cAAgBT,EAAcE,UACvC,CACArD,YAAYC,GACRsD,MAAMvD,YAAYC,EACtB,CACA4D,cACIxH,OAAOlB,KAAKqI,+BAAiC,CAAC,EAC9CnH,OAAOlB,KAAKsI,gCAAkC,CAAC,CACnD,CACA3B,uBACI3G,KAAK2I,mBACT,CAIAzC,uBACI,MAAO,CACH0C,QAAW5I,KAAK6H,QAChBzB,SAAayC,GAAa7I,KAAKD,KAAKkB,IAAI,IAAMjB,KAAKmG,eAAe0C,IAClE,mBAAoBC,IAAM9I,KAAKD,KAAKkB,IAAI,IAAMjB,KAAK0H,wBACnD,iBAAkBqB,IAAM/I,KAAKD,KAAKkB,IAAI,IAAMjB,KAAKyH,uBACjDc,MAASvI,KAAKuI,MACdjF,KAAQtD,KAAKsD,KACbkF,KAAQxI,KAAKwI,KACbQ,SAAYhJ,KAAKuD,SAEzB,CAIAoF,oBACIzH,OAAOlB,KAAKqI,+BAAiCD,MAAMX,oBAAoBrG,KAAKpB,MAC5EkB,OAAOlB,KAAKsI,gCAAkCF,MAAMV,qBAAqBtG,KAAKpB,KAClF,EAEemI,SAAoB1F,UAAI,SAAAC,GAAA,WAAAA,GAAwFyF,GAxchBxF,MAwcqDA,OAxcrDA,MAwc8EA,OAxc9EA,MAwcoGA,OAxcpGA,MAwc4H9C,GAAa,EACzOsI,EAAoBc,UAzc4EtG,MAAE,CAAAW,KAycE6E,EAAmBe,UAAA,qBAAAC,UAAA,SAAAC,EAAAC,GAzcrB,GAycqB,EAAAD,GAzcvBzG,KAAE/C,EAAA,KAAAwJ,EAAA,KAAAE,EAAF3G,MAAE2G,EAAF3G,WAAE0G,EAAApC,mBAAAqC,EAAAC,MAAA,GAAA3B,OAAA,CAAAW,MAAA,QAAAC,KAAA,QAAAT,SAAA,CAAFpF,MAyc0G,CACrN,CACI6G,QAASC,KACTC,eAAaC,OAAY,IAAMxB,GAC/ByB,OAAO,KA7cgGjH,aAAEkH,MAAA,EAAAC,KAAA,EAAAC,OAAA,4BAAAC,SAAA,SAAAZ,EAAAC,GAAA,EAAAD,GAAFzG,MAAE,eAgdpF,EAAAsH,cAAA,IAlE3B9B,CAAmB,KA0FnB+B,EAAkB,MAAxB,MAAMA,EACFpK,YAAYqD,EAAepD,GACvBC,KAAKmD,cAAgBA,EACrBnD,KAAKD,KAAOA,CAChB,CAcAsC,QAAQwF,EAASsC,EAAQ/D,EAAUzF,EAAQyJ,GACvCpK,KAAKqK,iBAAiBxC,EAASsC,EAAQxJ,GAClC2J,KAAKlE,GACLmE,MAAO1G,GAAUuG,EAAgBA,EAAcvG,GAAS2G,QAAQ3G,MAAMA,GAC/E,CAYAwG,iBAAiBxC,EAASsC,EAAQxJ,GAC9B,OAAO,IAAI8J,QAAQ,CAACC,EAASC,KAczB3K,KAAKmD,cAAczC,sBAbGC,GAAU,CAAC,EAauBkH,EAZpChB,IAChB7G,KAAKD,KAAKiG,kBAAkB,KACxB,IACIa,EACKxE,QAAQwF,EAAS,CAAEsC,WACnBG,KAAMzH,GAAU7C,KAAKD,KAAKkB,IAAI,IAAMyJ,EAAQ7H,IACrD,OACOgB,GACH8G,EAAO9G,EACX,GACH,EAEsE,EAEnF,EAEeqG,SAAmBzH,UAAI,SAAAC,GAAA,WAAAA,GAAwFwH,GA7hBfvH,MA6hBmD9C,GA7hBnD8C,MA6hB6EA,OAAS,EACtLuH,EAAmBtH,WA9hB6ED,MAAE,CAAAE,MA8hBiBqH,EAAkBpH,QAAlBoH,EAAkBzH,UAAAM,WAAc,SAtDhKmH,CAAkB,KA8DlBU,EAAgB,MAAtB,MAAMA,GAEaA,SAAiBnI,UAAI,SAAAC,GAAA,WAAAA,GAAwFkI,EAAgB,EAC7HA,EAAiBC,UAziB+ElI,MAAE,CAAAW,KAyiBYsH,IAG9GA,EAAiBE,UA5iB+EnI,MAAE,CAAAoI,UA4iByC,CACtJlL,EACAqK,GACHc,QAAA,CAAYC,QATXL,CAAgB,mECtpBTM,EAAY,MADzB,MACaA,EACXpL,cAAc,CAACqL,SAAAnL,KAAA,mBAAA0C,iBADJwI,EAAY,EAAAC,SAAAnL,KAAA,UAAAoL,EAAAC,IAAA,MAAZH,EAAYhC,UAAA,6BAAZgC,CAAY,KASZI,EAAgB,MAL7B,MAKaA,EAEXxL,YACUyL,GAAAvL,KAAAuL,aAOVvL,KAAAwL,KAAe,GACfxL,KAAAyL,MAAgB,GAChBzL,KAAA0L,QAAkB,GAElB1L,KAAA2L,QAAkB,GAClB3L,KAAA4D,OAAiB,EAEjB5D,KAAA4L,MAAgB,EA2BR5L,KAAA6L,WAAaC,IAAEC,OAAO,CAC5BP,KAAMM,IAAEE,SAASC,IAAI,GACrBR,MAAOK,IAAEE,SAASP,QAElBC,QAASI,IAAEE,SAASC,IAAI,GACxBC,QAASJ,IAAEE,SAASC,IAAI,GAExBE,UAAWL,IAAEE,SAASC,IAAI,MA9C1BhG,WAAW,KACTjG,KAAKoM,OAAK,EACT,KACL,CAWAC,OAAOC,GACL,OAAOtM,KAAK,GAAGsM,KAAQC,OAAS,CAClC,CAEAC,OAAOF,EAAcG,GACnBzM,KAAK,GAAGsM,KAAUG,CACpB,CAIAC,SAASC,EAAkBC,GACZ,OAATD,EAAEE,MACJF,EAAEG,iBAEFF,EAASG,aACP,KAEAH,EAASI,eACTJ,EAASI,eAET,OAGN,CAkBaC,KAAKC,GAAmB,IAAAC,EAAAnN,KAAA,SAAAoN,KAAA,YAEnC,MAAMC,EAASH,EAAYT,MAE3B,IAAKU,EAAKtB,WAAWyB,UAAUD,GAAQ7J,SAAW2J,EAAKxB,QAAQY,OAAS,GAAI,OAE5E,IAAIL,EAAUiB,EAAKI,KAAKrG,cAAcuF,MAAMe,WAAW,KAAM,QAoB3D,SAASC,IAETC,KAAKC,GAAG3N,KAAK4N,KAAK1G,cAAe,CAC/B2G,QAAS,EACTC,SAAU,IAEXxD,KAAK,KACJtK,KAAK4N,KAAK1G,cAAc/E,SACxBnC,KAAK4L,MAAO,GAEhB,CA7BAM,EAAUA,EAAQsB,WAAW,KAAM,4BAEnCL,EAAK5B,WACFwC,KACC,iDACAC,KAAKC,UAAU,CACbzC,KAAM6B,EAAO7B,KACbC,MAAO4B,EAAO5B,MAEdC,QAAS2B,EAAO3B,QAChBQ,QAASA,EAETP,QAASwB,EAAKxB,WAGjBuC,UAAWvB,IACVA,EAAEnJ,QAASiK,EAAiBU,KAAKhB,GAAOiB,MAAM,+CAA8C,EAa/F,EApCkC,EAqCrC,CAEAC,MAAMC,GACJtO,KAAK2L,QAAU2C,CACjB,CAKAlC,QAEEpM,KAAKuO,cAAcC,QAAS7B,MAE9B,CAACxB,SAAAnL,KAAA,mBAAA0C,iBA9GU4I,GAAgB3I,MAAA8L,MAAA,EAAAtD,SAAAnL,KAAA,UAAAoL,EAAAsD,IAAA,MAAhBpD,EAAgBpC,UAAA,kBAAAC,UAAA,SAAAC,EAAAC,MAAA,EAAAD,6BAuGb8B,EAAY,y2CCzH5BvI,MAAA,WAEAA,MAAA,WACIA,MAAA,WACAA,MAAA,QAAIA,MAAA,+BAAyBA,QAC7BA,MAAA,OAAGA,MAAA,kCAA4BA,UAEnCA,MAAA,cAAkCA,MAAA,sBAAAA,MAAAgM,GAAA,MAAAC,EAAAjM,MAAA,UAAYA,MAAA0G,EAAA4D,KAAA2B,GAAiB,GAE3DjM,MAAA,WAAAA,CAAoB,WAApBA,CAAoB,mBAApBA,CAAoB,SAApBA,CAAoB,cAKyDA,MAAA,WAAIA,QACjEA,MAAA,gBAAiEA,MAAA,mBAAAA,MAAAgM,GAAA,MAAAE,EAAAlM,MAAA,WAASA,MAAA0G,EAAAmD,OAAO,OAAMqC,EAAApC,OAAa,GAApG9J,cAOZA,MAAA,WAAAA,CAA2B,mBAA3BA,CAA2B,SAA3BA,CAA2B,eAIgDA,MAAA,YAAKA,QACpEA,MAAA,kBAAqEA,MAAA,mBAAAA,MAAAgM,GAAA,MAAAG,EAAAnM,MAAA,WAASA,MAAA0G,EAAAmD,OAAO,QAAOsC,EAAArC,OAAc,GAA1G9J,cAOZA,MAAA,WAAAA,CAA2B,mBAA3BA,CAA2B,SAA3BA,CAA2B,eAIsCA,MAAA,cAAOA,QAC5DA,MAAA,kBAAkFA,MAAA,mBAAAA,MAAAgM,GAAA,MAAAI,EAAApM,MAAA,WAASA,MAAA0G,EAAAmD,OAAO,UAASuC,EAAAtC,OAAgB,GAA3H9J,gBAQhBA,MAAA,mBAAAA,CAAe,qBACgDA,MAAA,mBAAAqM,GAAArM,MAAAgM,GAAA,MAAAM,EAAAtM,MAAA,WAAWA,MAAA0G,EAAAqD,SAAAsC,EAAAC,GAAsB,GAAEtM,UAIlGA,MAAA,2BAIAA,MAAA,mBAAAqM,GAAA,OAAW3F,EAAAgF,MAAAW,EAAa,GAG1BrM,QAEAA,MAAA,gBAAoCA,MAAA,WAAIA,UAG1CA,MAAA,YAAAA,CAAuF,YAAvFA,CAAuF,SAG3EA,MAAA,cAAOA,QAEXA,MAAA,SAAIA,MAAA,cAAOA,QACXA,MAAA,YAA6BA,MAAA,aAAMA,QAEnCA,MAAA,WAA4BA,MAAA,kBAAWA,QACvCA,MAAA,WAA8BA,MAAA,kCAAsBA,QAEpDA,MAAA,WAAwBA,MAAA,yBAAkBA,QAC1CA,MAAA,WAAoBA,MAAA,uBAAgBA,UAGxCA,MAAA,SAAAA,CAAK,SACGA,MAAA,2BAAoBA,QACxBA,MAAA,YAA6BA,MAAA,UAAGA,QAEhCA,MAAA,WAA4BA,MAAA,4BAAqBA,QACjDA,MAAA,WAA8BA,MAAA,4BAAqBA,QAEnDA,MAAA,WAAwBA,MAAA,yBAAkBA,QAC1CA,MAAA,WAAoBA,MAAA,uBAAgBA,kBArFxBA,MAAA,GAAAA,MAAA,UAAAA,MAAA,EAAAuM,EAAA7F,EAAAuC,OAYOjJ,MAAA,IAAAA,MAAA,UAAA0G,EAAAgD,OAAA,qBAYA1J,MAAA,GAAAA,MAAA,UAAA0G,EAAAgD,OAAA,sBAYA1J,MAAA,GAAAA,MAAA,UAAA0G,EAAAgD,OAAA,wBAmBvB1J,MAAA,GAAAA,MAAA,0EDhDSuI,GAAYiE,OAAA,sxHASZ7D,CAAgB,mBET7B,MAAM8D,EAAiB,CACrB,CACEC,KAAM,GACNC,UAAWhE,IAEb,IAWWiE,EAAa,MAT1B,MASaA,EAAapE,SAAAnL,KAAA,mBAAA0C,iBAAb6M,EAAa,EAAApE,SAAAnL,KAAA,UAAAoL,EAAAoE,IAAA,MAAbD,IAAapE,SAAAnL,KAAA,UAAAoL,EAAAqE,IAAA,UANtBxE,KACAyE,KACAC,KAAaC,SAASR,GACtBxE,YAGS2E,CAAa","names":["_c0","ScriptService","constructor","zone","this","scriptElemId","windowGrecaptcha","windowGrecaptchaEnterprise","windowOnLoadCallbackProperty","windowOnLoadEnterpriseCallbackProperty","globalDomain","defaultDomain","enterpriseApi","defaultApi","registerCaptchaScript","config","render","onLoad","language","grecaptchaScriptLoaded","useEnterprise","run","window","getCallbackName","bind","scriptElem","document","createElement","id","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","elem","getElementById","remove","undefined","execute","getLanguageParam","hl","useGlobalDomain","ɵfac","t","i0","ɵprov","token","factory","providedIn","BaseReCaptchaComponentDirective","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","type","tabIndex","success","EventEmitter","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","onChange","val","onTouched","isLoaded","ngAfterViewInit","control","get","NgControl","InjectFlags","Optional","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","Error","renderReCaptcha","runOutsideAngular","setTimeout","getCaptchaProperties","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","ɵdir","inputs","siteKey","outputs","features","ReCaptchaType","InvisibleReCaptcha","ReCaptcha2","ReCaptcha2Component","super","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","theme","size","recaptchaType","ngOnDestroy","registerCallbacks","sitekey","response","expired-callback","error-callback","tabindex","ɵcmp","selectors","viewQuery","rf","ctx","_t","first","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","encapsulation","ReCaptchaV3Service","action","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","NgxCaptchaModule","ɵmod","ɵinj","providers","imports","CommonModule","FormProperty","static","core","lG2","ContactComponent","httpClient","name","email","company","captcha","sent","formSchema","z","object","string","min","message","recaptcha","clean","getter","data","length","setter","value","checkKey","e","textarea","key","preventDefault","setRangeText","selectionStart","send","contactForm","_this","_asyncToGenerator","values","safeParse","area","replaceAll","emailHasBeenSent","gsap","to","form","opacity","duration","post","JSON","stringify","subscribe","call","alert","check","eve","formsElements","forEach","i1","Xpm","_r7","_r1","_r2","_r3","_r4","$event","_r5","_c2","styles","routes","path","component","ContactModule","oAB","cJS","FormsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs","./src/app/contact/contact.component.ts","./src/app/contact/contact.component.html","./src/app/contact/contact.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        this.scriptElemId = \"ngx-catpcha-script\";\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = \"grecaptcha\";\r\n        /**\r\n         * Name of enterpise property in the global google recaptcha script\r\n         */\r\n        this.windowGrecaptchaEnterprise = \"enterprise\";\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\r\n        /**\r\n         * Name of the global callback for enterprise\r\n         */\r\n        this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\r\n        this.globalDomain = \"recaptcha.net\";\r\n        this.defaultDomain = \"google.com\";\r\n        this.enterpriseApi = \"enterprise.js\";\r\n        this.defaultApi = \"api.js\";\r\n    }\r\n    registerCaptchaScript(config, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            if (config.useEnterprise) {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\r\n                });\r\n            }\r\n            else {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        if (config.useEnterprise) {\r\n            window[this.getCallbackName(true)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]))));\r\n        }\r\n        else {\r\n            window[this.getCallbackName(false)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))));\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement(\"script\");\r\n        scriptElem.id = this.scriptElemId;\r\n        scriptElem.innerHTML = \"\";\r\n        scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\r\n    }\r\n    cleanup() {\r\n        const elem = document.getElementById(this.scriptElemId);\r\n        if (elem) {\r\n            elem.remove();\r\n        }\r\n        window[this.getCallbackName()] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    grecaptchaScriptLoaded(useEnterprise) {\r\n        if (!window[this.getCallbackName(useEnterprise)] ||\r\n            !window[this.windowGrecaptcha]) {\r\n            return false;\r\n        }\r\n        else if (useEnterprise &&\r\n            window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\r\n            return true;\r\n            // if only enterprise script is loaded we need to check some v3's method\r\n        }\r\n        else if (window[this.windowGrecaptcha].execute) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets global callback name\r\n     * @param useEnterprise Optional flag for enterprise script\r\n     * @private\r\n     */\r\n    getCallbackName(useEnterprise) {\r\n        return useEnterprise\r\n            ? this.windowOnLoadEnterpriseCallbackProperty\r\n            : this.windowOnLoadCallbackProperty;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return \"\";\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     */\r\n    getCaptchaScriptUrl(config, render, language) {\r\n        const domain = config.useGlobalDomain\r\n            ? this.globalDomain\r\n            : this.defaultDomain;\r\n        const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\r\n        const callback = this.getCallbackName(config.useEnterprise);\r\n        return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\n/** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = \"ngx_captcha_id_\";\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        this.useEnterprise = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = \"image\";\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Required by ControlValueAccessor\r\n         */\r\n        this.onChange = (val) => { };\r\n        this.onTouched = (val) => { };\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange &&\r\n                changes.hl.currentValue !== changes.hl.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange &&\r\n                changes.useGlobalDomain.currentValue !==\r\n                    changes.useGlobalDomain.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    ensureCaptchaElem(captchaElemId) {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            // to fix reCAPTCHA placeholder element must be an element or id\r\n            // https://github.com/Enngage/ngx-captcha/issues/96\r\n            setTimeout(() => {\r\n                this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n                this.ready.next();\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript({\r\n            useGlobalDomain: this.useGlobalDomain,\r\n            useEnterprise: this.useEnterprise,\r\n        }, \"explicit\", (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement(\"div\");\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.4\", type: BaseReCaptchaComponentDirective, inputs: { siteKey: \"siteKey\", useGlobalDomain: \"useGlobalDomain\", useEnterprise: \"useEnterprise\", type: \"type\", hl: \"hl\", tabIndex: \"tabIndex\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], useGlobalDomain: [{\r\n                type: Input\r\n            }], useEnterprise: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], success: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], reset: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], expire: [{\r\n                type: Output\r\n            }] } });\n\nvar ReCaptchaType;\r\n(function (ReCaptchaType) {\r\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\r\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\r\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n    }\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: InvisibleReCaptchaComponent, selector: \"ngx-invisible-recaptcha\", inputs: { theme: \"theme\", badge: \"badge\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], badge: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n        * Name of the global expire callback\r\n        */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n        * Name of the global error callback\r\n        */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n        * Size\r\n        */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptcha2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ ReCaptcha2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ReCaptcha2Component, selector: \"ngx-recaptcha2\", inputs: { theme: \"theme\", size: \"size\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptchaV3Service {\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((resolve, reject) => {\r\n            const configuration = config || {};\r\n            const onRegister = (grecaptcha) => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((token) => this.zone.run(() => resolve(token)));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            };\r\n            this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: ScriptService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ScriptService }, { type: i0.NgZone }]; } });\n\nclass NgxCaptchaModule {\r\n}\r\n/** @nocollapse */ NgxCaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxCaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, declarations: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent], imports: [CommonModule], exports: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent] });\r\n/** @nocollapse */ NgxCaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, providers: [\r\n        ScriptService,\r\n        ReCaptchaV3Service\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, Directive, ElementRef, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\n\r\nimport { NgForm } from '@angular/forms';\r\nimport { z } from 'zod';\r\n\r\nimport { gsap } from 'gsap/gsap-core';\r\n\r\n@Directive({selector: 'form-property'})\r\nexport class FormProperty {\r\n  constructor(){}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-contact',\r\n  templateUrl: './contact.component.html',\r\n  styleUrls: ['./contact.component.scss'],\r\n})\r\nexport class ContactComponent {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n  ){\r\n    setTimeout(() => {\r\n      this.clean();\r\n    }, 1800);\r\n  }\r\n\r\n  name: string = '';\r\n  email: string = '';\r\n  company: string = '';\r\n\r\n  captcha: string = '';\r\n  ready: boolean = false;\r\n\r\n  sent: boolean = false;\r\n\r\n  getter(data: string) {\r\n    return this[`${data}`].length > 0;\r\n  }\r\n\r\n  setter(data: string, value: string) {\r\n    this[`${data}`] = value;\r\n  }\r\n\r\n\r\n  // sprawdzamy czy użytkownika chce dodać tab do tekstu\r\n  checkKey(e: KeyboardEvent, textarea: HTMLTextAreaElement) {\r\n    if (e.key == 'Tab') {\r\n      e.preventDefault();\r\n\r\n      textarea.setRangeText(\r\n        '\\t',\r\n\r\n        textarea.selectionStart,\r\n        textarea.selectionStart,\r\n\r\n        'end'\r\n      );\r\n    }\r\n  }\r\n\r\n  private formSchema = z.object({\r\n    name: z.string().min(3),\r\n    email: z.string().email(),\r\n\r\n    company: z.string().min(2),\r\n    message: z.string().min(5),\r\n\r\n    recaptcha: z.string().min(10)\r\n  });\r\n\r\n  @ViewChild(\"area\")\r\n  area: ElementRef;\r\n\r\n  @ViewChild(\"form\")\r\n  form: ElementRef;\r\n\r\n  public async send(contactForm: NgForm): Promise<void> {\r\n\r\n    const values = contactForm.value;\r\n\r\n    if (!this.formSchema.safeParse(values).success || this.captcha.length < 10) return;\r\n\r\n    let message = this.area.nativeElement.value.replaceAll(\"\\n\", \"<br>\");\r\n    message = message.replaceAll(\"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;');\r\n    \r\n    this.httpClient\r\n      .post(\r\n        'https://mail-service-4o2h.onrender.com/contact',\r\n        JSON.stringify({\r\n          name: values.name,\r\n          email: values.email,\r\n\r\n          company: values.company,\r\n          message: message,\r\n\r\n          captcha: this.captcha,\r\n        })\r\n      )\r\n      .subscribe((e: {success: boolean}) => {\r\n        e.success? emailHasBeenSent.call(this): alert(\"Somethink goes wrong, pleas try again later.\");\r\n      });\r\n\r\n      function emailHasBeenSent()\r\n    {\r\n      gsap.to(this.form.nativeElement, {\r\n        opacity: 0,\r\n        duration: 1\r\n      })\r\n      .then(() => {\r\n        this.form.nativeElement.remove();\r\n        this.sent = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  check(eve: any) {\r\n    this.captcha = eve;\r\n  }\r\n\r\n  @ViewChildren(FormProperty)\r\n  formsElements: QueryList<ElementRef>;\r\n\r\n  clean()\r\n  {\r\n    this.formsElements.forEach((e: ElementRef) => {\r\n    })\r\n  }\r\n}\r\n","<img src=\"./assets/images/continents.png\" titl=\"Image of world\" alt=\"Image of world\">\r\n\r\n<div id=\"greetings\" [ngClass]=\"{'show': sent}\">\r\n    <img src=\"./assets/logo/big_logo.png\" title=\"logo\" alt=\"logo\">\r\n    <h3>Thanks for your question.</h3>\r\n    <p>We will response during: 16h</p>\r\n</div>\r\n<form #form #contactForm=\"ngForm\" (ngSubmit)=\"send(contactForm)\">\r\n\r\n    <div class=\"sender\">\r\n        <div class=\"senderDetails\">\r\n            \r\n            <form-property>\r\n                <div>\r\n                    <label [ngClass]=\" getter('name')? 'static': '' \" for=\"Name\">Name</label>\r\n                    <input #name ngModel type=\"text\" autocomplete=\"name\" name=\"name\" (input)=\"setter('name', name.value)\">\r\n                </div>\r\n            </form-property>\r\n            \r\n            \r\n        </div>\r\n\r\n        <div class=\"senderDetails\">\r\n          \r\n            <form-property>\r\n                <div>\r\n                    <label [ngClass]=\" getter('email')? 'static': '' \" for=\"Email\">Email</label>\r\n                    <input #email ngModel type=\"email\" autocomplete=\"email\" name=\"email\" (input)=\"setter('email', email.value)\">\r\n                </div>\r\n            </form-property>\r\n            \r\n            \r\n        </div>\r\n\r\n        <div class=\"senderDetails\">\r\n\r\n            <form-property>\r\n                <div>\r\n                    <label [ngClass]=\" getter('company')? 'static': '' \">Company</label>\r\n                    <input #company ngModel type=\"text\" autocomplete=\"additional-name\" name=\"company\" (input)=\"setter('company', company.value)\">\r\n                </div>\r\n            </form-property>\r\n            \r\n            \r\n        </div>\r\n    </div>\r\n\r\n    <form-property>\r\n        <textarea #area ngModel name=\"message\" cols=\"31\" rows=\"13\" (keydown)=\"checkKey($event, area)\"></textarea>\r\n    </form-property>\r\n    \r\n\r\n    <ngx-recaptcha2 #captchaElem\r\n    ngModel\r\n    name=\"recaptcha\"\r\n    siteKey=\"6LdxSBgpAAAAADeT9iTchQK0pmENafLb83Id5v8r\"\r\n    (success)=\"check($event)\"\r\n    [useGlobalDomain]=\"false\"\r\n    name=\"recaptcha\">\r\n  </ngx-recaptcha2>\r\n\r\n  <button class=\"send\" type=\"submit\" >Send</button>\r\n</form>\r\n\r\n<div itemprop=\"location\" itemscope itemtype=\"https://schema.org/Place\" class=\"contact\">\r\n    \r\n    <div itemprop=\"address\" itemscope itemtype=\"https://schema.org/PostalAddress\">\r\n        <h2>CONTACT</h2>\r\n    \r\n        <h4>ITELITE</h4>\r\n        <h5 itemprop=\"addressRegion\">Poland</h5>\r\n    \r\n        <p itemprop=\"streetAddress\">Terenowa 42</p>\r\n        <p itemprop=\"addressLocality\">Poland, Wrocław 52-231</p>\r\n        \r\n        <p itemprop=\"telephone\">T: +48 713 230 180</p>\r\n        <p itemprop=\"email\">adas@itelite.net</p>\r\n    </div>\r\n    \r\n    <div>\r\n        <h4>ITELITE ANTENNAS Inc</h4>\r\n        <h5 itemprop=\"addressRegion\">USA</h5>\r\n\r\n        <p itemprop=\"streetAddress\">10631 NW 122nd Street</p>\r\n        <p itemprop=\"addressLocality\">Medley, Florida 33178</p>\r\n        \r\n        <p itemprop=\"telephone\">T: +1.305.677.9293</p>\r\n        <p itemprop=\"email\">adas@itelite.net</p>\r\n    </div>\r\n    \r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ContactComponent, FormProperty } from './contact.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ContactComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [ContactComponent, FormProperty],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n    NgxCaptchaModule\r\n  ]\r\n})\r\nexport class ContactModule { }\r\n"],"x_google_ignoreList":[0]}